*** Settings ***
Documentation     Cirrus Test Automation - Global search 
Variables         ${CURDIR}/../testdata/cirrusGS_variables.py
Resource          ${CURDIR}/../resources/Global_search_rest_keywords.txt
Test Setup        Login
Test Teardown     Logout
Library           CirrusLibrary
Library           RoboGalaxyLibrary
Force Tags        rest

*** Test Cases ***	
Search Functionality
    [Tags]  GlobalSearch    string
    Set Log Level    TRACE
    :FOR    ${x}   IN RANGE     0   8
	\   Set to Dictionary   ${rest_global_search}   search  ${string[${x}]}
    \   ${resp}=    Post Json    global    ${rest_GS}   data=${rest_global_search}    headers=${headers}   
	\   Should Be Equal As Strings    ${resp.status_code}    200
	\   Run keyword if	${resp.json()['count']} == 0	Fail	ELSE	Log to console	\nThe Count for String <${string[${x}]}> is\t${resp.json()['count']}\n
	\   ${response}=    Get Total Response  ${resp.json()}   
    \   ${match}=   String Validation   ${response}     ${string[${x}]}     ${x}
    \   Should Not Match 	${match}    ${EMPTY}
    
Search Functionality for null and special character
    [Tags]  GlobalSearch    null
    Set Log Level    TRACE
    :FOR    ${x}   IN	8   9
    \   Set to Dictionary   ${rest_global_search}   search  ${string[${x}]}
    \   ${resp}=    Post Json    global    ${rest_GS}   data=${rest_global_search}    headers=${headers}
	\   Should Be Equal As Strings    ${resp.status_code}    200
	\   Run keyword if	${resp.json()['count']} == 0	log to console   \nNo Records Found for String \t<${string[${x}]}>\n		ELSE	log to console   Fail
    
Verify Log file content
	[Tags]  GlobalSearch	logfile
    Set Log Level    TRACE
    Set to Dictionary   ${rest_global_search}   search  ${string[0]}
    ${resp}=    Post Json    global    ${rest_GS}   data=${rest_global_search}    headers=${headers}
	Run keyword if	${resp.json()['count']} == 0	Fail	ELSE	Log to console	\nThe Count for String \t<${string[0]}>\tis\t${resp.json()['count']}\n
	Should Be Equal As Strings    ${resp.status_code}    200
	${response}=    Get Total Response  ${resp.json()}
	:FOR	${x}	IN RANGE	0	${response.json()['count']}
	\	${validation} =	log file validation	${response.json()['logsearchinfo'][${x}]['path']}	${string[0]}

Next and Previous Functionality by entering string
	[Tags]  GlobalSearch	pagination
    Set Log Level    TRACE
	log to console	\nNext tab\n
	Set to Dictionary   ${rest_global_search}   itemFrom  ${itemfrom_Next}
    ${resp}=    Post Json    global    ${rest_GS}   data=${rest_global_search}    headers=${headers}
	Should Be Equal As Strings    ${resp.status_code}    200
	Run keyword if	${resp.json()['count']} == 0	Fail
	Set to Dictionary   ${rest_global_search}   itemFrom  ${itemfrom_Prev}
	log to console	\nPrevious tab\n
    ${resp}=    Post Json    global    ${rest_GS}   data=${rest_global_search}    headers=${headers}
	Should Be Equal As Strings    ${resp.status_code}    200
	Run keyword if	${resp.json()['count']} == 0	Fail
    
Verify the page size functionality    
	[Tags]  GlobalSearch	pagesize
    Set Log Level    TRACE
    ${resp}=    Post Json    global    ${rest_set_pagesize}   data=${req_pagesize}    headers=${headers}
	Should Be Equal As Strings    ${resp.status_code}    200
    ${headers}=    Create Dictionary    auth=${session_id}
	${resp}=	Get		global	${rest_get_pagesize}${rest_login['userName']}
	Run keyword if	${resp.text} != ${req_pagesize['pageSize']}	Fail    ELSE    Log		\nPage Size is ${resp.text}\n		console=yes

Verify the suggestion list functionality
	[Tags]  GlobalSearch	suggestion list
    Set Log Level    TRACE
	Set to Dictionary   ${rest_global_search}   search  ${string[10]}
    ${resp}=    Post Json    global    ${rest_GS}   data=${rest_global_search}    headers=${headers}
	Should Be Equal As Strings    ${resp.status_code}    200
    Run keyword if	${resp.json()['count']} == 0	Fail	ELSE	Log to console	\nThe Count for String \t<${string[0]}>\tis\t${resp.json()['count']}\n
	${data}=    Create Dictionary    search=${string[10]}
	${resp_suggest}=    Post Json    global    ${rest_suggestion_list}   data=${data}    headers=${headers}
	List Should Not Contain Duplicates	${resp_suggest.json()}
    Log To Console    \n\n Suggustion list is ${resp_suggest.json()}\n\n
	Run keyword if	${resp.json()['count']} != 0	List Should Contain Value	${resp_suggest.json()}	${string[10]}	
	...		ELSE	List Should Not Contain Value	${resp_suggest.json()}	${string[10]}
    
Verify the download functionality 
	[Tags]  GlobalSearch	downloadlogfile
    Set Log Level    TRACE
    Set to Dictionary   ${rest_global_search}   search  ${string[0]}
    ${resp}=    Post Json    global    ${rest_GS}   data=${rest_global_search}    headers=${headers}
	Run keyword if	${resp.json()['count']} == 0	Fail	ELSE	Log to console	\nThe Count for String \t<${string[0]}>\tis\t${resp.json()['count']}\n
	Should Be Equal As Strings    ${resp.status_code}    200
	${response}=    Get Total Response  ${resp.json()}
	:FOR	${x}	IN RANGE	0	${response.json()['count']}
	\	Log file download validation	${rest_log_download}${response.json()['logsearchinfo'][${x}]['path']}   ${string[0]}

