from paramiko import client
from robot.libraries.BuiltIn import BuiltIn
import time

class VerifyResults(object):
    def __init__(self):
        self.client = client.SSHClient()
        self.client.set_missing_host_key_policy(client.AutoAddPolicy())
        self.builtin = BuiltIn()

    def __del__(self):
        if self.client:
            self.client.close()

    def connect_sut_via_ssh(self, address, username, password):
        """Login to remote sut via ssh

        Arguments:
            address: remote sut ip address.
            username: remote sut login username.
            password: remote sut login password.
        """
        self.address = address
        self.username = username
        self.password = password
        self.client.connect(self.address, username=self.username, password=self.password)

    def verify_cirrus_logs_on_linux_sut(self, file):
        """Verify if the expected file generated by Cirrus exists in target linux sut.

        Arguments:
            file: file path in the sut.

        Returns:
            Return string "File exist" if the file exists in the target sut.
            Otherwise return string "File does not exist".
        """
        self.builtin.log_to_console("Connected to %s" % self.address)
        stdin, stdout, stderr = self.client.exec_command('[ -f ' + str(file) + ' ] && echo "File exist" || echo "File does not exist"')
        alldata = ''
        for line in stdout.readlines():
            alldata += line.strip()
            self.builtin.log_to_console("%s" % alldata)
        return alldata

    def verify_cirrus_logs_on_windows_sut(self, file):
        """Verify if the expected file generated by Cirrus exists in target windows sut.

        Arguments:
            file: file path in the sut.

        Returns:
            Return string "File exist" if the file exists in the target sut.
            Otherwise return string "File does not exist".
        """
        self.builtin.log_to_console("Connected to %s" % self.address)
        stdin, stdout, stderr = self.client.exec_command('cmd.exe /c "IF EXIST ' + str(file) + ' (ECHO File exist) ELSE  (ECHO File does not exist)"')
        alldata = ''
        for line in stdout.readlines():
            alldata += line.strip()
            self.builtin.log_to_console("%s" % alldata)
        return alldata

    def verify_sut_reboot(self, address, username, password):
        """Verify if sut is connectable.

        Arguments:
            address: sut login ip.
            username: sut login username.
            password: sut login password.

        Returns:
            Return 0 if sut is connectable.
        """
        count = 0
        while True:
            self.builtin.log_to_console("Connecting to %s..." % address)
            time.sleep(60)
            count = count + 1
            conn = self.connect_sut_via_ssh(address, username, password)
            if not conn:
                self.builtin.log_to_console("Successfully connected to %s" % address)
                return 0
            if count > 20:
                self.builtin.log_to_console("Unable to connect to %s" % address)
                return -1
