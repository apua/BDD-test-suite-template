*** Settings ***
Variables         ${CURDIR}/../testdata/cirrusGS_variables.py
Library           RoboGalaxyLibrary
Library           CirrusLibrary
Library			  Collections
Library           RequestsLibrary
Library			  String

*** Keywords ***
Login
	[Tags]  GlobalSearch   Login
    Set Log Level    TRACE
    Create Session Json    global    https://${CIRRUS_IP}
    ${resp}=    Post Json    global    ${rest_login_usr}/login    data=${rest_login}    headers=${headers}
    Should Be Equal As Strings    ${resp.status_code}    200
    Dictionary Should Contain Key    ${resp.json()}    sessionID
    Set Suite Variable    ${session_id}    ${resp.json()['sessionID']}
    [Return]        ${session_id} 
    
Get Total Response
    [Arguments]     ${resp}
    Set to Dictionary   ${rest_global_search}   itemCount  ${resp['count']} 
	${resp_count}=    Post Json    global    ${rest_GS}   data=${rest_global_search}    headers=${headers}
	Should Be Equal As Strings    ${resp_count.status_code}    200
    [Return]    ${resp_count}
    
String Validation
    [Arguments]		${response}     ${str}      ${index}
    Log to console  \n.....Proceeding to Validate String <${str}> in Preview Summary\n
    :FOR	${x}	IN RANGE	0	${response.json()['count']}
	\	${l} =	Get Length	${response.json()['logsearchinfo'][${x}]['summary']}
	\	${validation} =      Run Keyword If  '${index}' == '0' or '${index}' == '1'     
    \   ...     Search Validation   ${l}    ${response.json()['logsearchinfo'][${x}]['summary']}    ${str}
    \   ...     ELSE IF    '${index}' == '2'       wildcard String(*)	${l}	${response.json()['logsearchinfo'][${x}]['summary']}	${str} 
    \   ...     ELSE IF    '${index}' == '3'       wildcard String(?)	${l}	${response.json()['logsearchinfo'][${x}]['summary']}	${str}
    \   ...     ELSE        Strings With Logical Operators	${l}	${response.json()['logsearchinfo'][${x}]['summary']}	${str}
    [Return]    ${validation}
    
Search Validation
    [Arguments]		${l}	${var}	${SEARCH_STRING}
    ${string_1} =	Replace String 	${SEARCH_STRING}	"	${EMPTY}
	${string_2} =	Replace String 	${string_1}	${SPACE}	|
	:FOR	${x}	IN RANGE	0	${l}
	\	${match} =	Get Lines Matching Regexp	${var[${x}]}	(?i)(${string_2})	partial_match=true
    \   Should Not Match 	${match}    ${EMPTY}
	[Return]    ${match}

wildcard String(*)
    [Arguments]		${l}	${var}	${SEARCH_STRING}
	${str} =	Remove String 	${SEARCH_STRING}	*
	:FOR	${x}	IN RANGE	0	${l}
	\	${match} =	Get Lines Containing String	${var[${x}]}	${str}	case-insensitive=true
	\	Should Not Match 	${match}    ${EMPTY}
	[Return]    ${match}
	
Wildcard String(?)
    [Arguments]		${l}	${var}	${SEARCH_STRING}
	${str} =	Replace String 	${SEARCH_STRING}	?	.
	:FOR	${x}	IN RANGE	0	${l}
	\	${match} =	Get Lines Matching Regexp	${var[${x}]}	(?i)${str}	partial_match=true
	\	Should Not Match 	${match}    ${EMPTY}
	[Return]    ${match}
    
Strings With Logical Operators
    [Arguments]		${l}	${var}	${SEARCH_STRING}
	${string} =	Replace String 	${SEARCH_STRING}	${SPACE}	${EMPTY}
	${string_1} =	Replace String 	${string}	&	|
	${string_2} =	Replace String 	${string_1}	!	|^
	:FOR	${x}	IN RANGE	0	${l}
	\	${match} =	Get Lines Matching Regexp	${var[${x}]}	(?i)(${string_2})	partial_match=true
	\	Should Not Match 	${match}    ${EMPTY}
	[Return]    ${match}
	
log file validation
	[Arguments]		${path}     ${SEARCH_STRING}
	${data}=    Create Dictionary    logfilePath=${path}	searchString=${SEARCH_STRING}
    ${resp}=    Post Json    global    ${rest_logfile}   data=${data}    headers=${headers}
    ${str} =	Replace String 	${SEARCH_STRING}	${SPACE}	|
    ${match} =	Get Lines Matching Regexp	${resp.json()['fileContent']}	(?i)(${str})	partial_match=true
	Should Not Match 	${match}    ${EMPTY}
	[Return]    ${match}
	
Log file download validation
	[Arguments]	${REST_DOWNLOAD}    ${SEARCH_STRING}
    ${string_1} =	Replace String 	${SEARCH_STRING}	"	${EMPTY}
	${string_2} =	Replace String 	${string_1}	${SPACE}	|
    ${resp}=    Get    global    ${REST_DOWNLOAD}
    ${match} =	Get Lines Matching Regexp	${resp.text}	(?i)(${string_2})	partial_match=true
	Should Not Match 	${match}    ${EMPTY}
	[Return]    ${match}

Logout
    [Tags]  login
    Set Log Level    TRACE
    Create Session    global    https://${CIRRUS_IP}
    Set to Dictionary   ${headers}   auth=${session_id}
    ${resp}=    Delete    global    ${rest_login_usr}logout    headers=${headers}
    Should Be Equal As Strings    ${resp.status_code}    204
