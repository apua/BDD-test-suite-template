*** Settings ***
Library           RequestsLibrary
Library           SSHLibrary
Library           RoboGalaxyLibrary

*** Variables ***
${REST USR}       /rest/login-sessions?action=
${REST HW}        /rest/cirrus/servers
${REST JOB}       /rest/cirrus/jobs

*** Keywords ***
Login Appliance
    [Arguments]     ${cirrus_ip}   ${cirrus_username}  ${cirrus_password}
    [Documentation]     {External}\n
    ...                 Login to appliance and return login session id.
    ...                 Example:
    ...                 | ${session_id}= | Login Appliance | 192.168.1.2 | administrator | password |
    Log     Login to Appliance ${cirrus_ip}     console=yes
    Create Session Json    cirrus    https://${CIRRUS_IP}
    ${data}=    Create Dictionary    userName=${cirrus_username}    password=${cirrus_password}
    ${headers}=    Create Dictionary    Content-Type=application/json
    ${resp}=    Post Json    cirrus    ${REST USR}login    data=${data}    headers=${headers}
    Should Be Equal As Strings    ${resp.status_code}    200
    Dictionary Should Contain Key    ${resp.json()}    sessionID
    Set Suite Variable    ${session_id}    ${resp.json()['sessionID']}
    Log    \nSession ID is ${session_id}    console=yes
    [Return]        ${session_id}

Monitor If Job Status Changes
    [Arguments]    ${session_id}    ${cirrus_id}    ${criteria}=pass
    [Documentation]     {External}\n
    ...                 Monitor Cirrus job status. ${session_id} is cirrus access auth token. ${cirrus_id} is the cirrus job id. ${criteria} could be pass, fail, or abort.\n
    ...                 Example:
    ...                 | ${session_id}= | Login Appliance | 192.168.1.2 | administrator | password |
    ...                 | Monitor If Job Status Changes | ${session_id} | ci-005056987B37_administrator_448 | pass |
    ${resp}=    Monitor Specified Job    ${CIRRUS_IP}      ${session_id}    ${cirrus_id}
    Should Be Equal As Strings    ${resp[0]}    200
    Log      The job ${cirrus_id} status is ${resp[1]["status"]}    console=yes
    Should Be Equal As Strings    ${resp[1]["status"]}    ${criteria}

Read Json File
    [Arguments]    ${fn}
    [Documentation]     {Internal}\n
    ...                 Read JSON file locally\n
    ...                 Example:
    ...                 | Read Json File | /home/my_directory/myjson.json |
    ${tp}=    OperatingSystem.Get File    ${fn}
    ${ret}=    Evaluate    json.loads('''${tp}''')    json
    [Return]    ${ret}

Find Job Id
    [Arguments]    ${cid}
    [Documentation]     {External}\n
    ...                 Find job id from cirrus\n
    ...                 Example:
    ...                 | Find Job Id | ci-005056987B37_administrator_448 |
    Log    ${cid}
    Create Session    cirrus    ${CIRRUS_URL}
    ${found}=    Set Variable    False
    ${headers}=    Create Dictionary    auth=${session_id}
    ${resp}=    Get    cirrus    ${REST JOB}    headers=${headers}
    Should Be Equal As Strings    ${resp.status_code}    200
    @{jobs}=    Set Variable    ${resp.json()['members']}
    : FOR    ${job}    IN    @{jobs}
    \    ${cur id}=    Set Variable    ${job['cirrusId']}
    \    ${found}=    Set Variable If    '${cur id}'=='${cid}'    True    False
    \    Run Keyword If    ${found}    Log    ${job}
    \    Run Keyword If    ${found}    Exit For Loop
    ${not found}=    Set Variable If    ${found}    False    True
    Run Keyword If    ${not found}    Fail    Cannot find the job id

Create OS Snapshot
    [Arguments]      ${OSes}
    [Documentation]     {External}\n
    ...                 Create multiple VM snapshots\n
    ...                 Example:
    ...                 | ${OSes}= | Create list | VM1 | VM2 |
    ...                 | Create OS Snapshot | ${OSes} |
    : FOR   ${OS}   IN      @{OSes}
    \   Create VM Snapshot      ${OS}      original

Revert Tested OS
    [Arguments]      ${OSes}
    [Documentation]     {External}\n
    ...                 Revert multiple VM snapshots\n
    ...                 Example:
    ...                 | ${OSes}= | Create list | VM1 | VM2 |
    ...                 | Revert Tested OS | ${OSes} |
    : FOR   ${OS}   IN      @{OSes}
    \  Revert VM To Named Snapshot     ${OS}     original
    \  Delete Named Vm Snapshot        ${OS}     original

Check If File Exist In OS
    [Arguments]     ${sys_ip}   ${sys_username}     ${sys_password}     ${file_list}
    [Documentation]     {External}\n
    ...                 Check if files exist in OS. The ${sys_ip} is the OS login ip. ${sys_username} and ${sys_password} are the login account and password. ${file_list} are the list of files containing file pathes.\n
    ...                 Example:
    ...                 | ${file_list}= | Create list | /home/F1 | /home/F2 |
    ...                 | Check If File Exist In OS | 192.168.1.2 | admin | password | ${file_list} |
    Open Connection     ${sys_ip}
    Login   ${sys_username}     ${sys_password}
    : FOR   ${file}   IN      @{file_list}
    \   SSHLibrary.File Should Exist   ${file}

Add SUT
    [Arguments]    ${sut}
    [Documentation]     {External}\n
    ...                 Add SUT to cirrus.\n
    ...                 Example:
    ...                 | ${sut}= | Create Dictionary | name=sut | type=Generic | desc=description  |
    ...                 | Add SUT | ${sut} |
    Create Session Json    cirrus    ${CIRRUS_URL}
    ${headers}=    Create Dictionary    Content-Type=application/json    auth=${session_id}
    ${data}=    Create List     ${sut}
    ${resp}=    Post Json    cirrus    ${REST HW}    data=${data}    headers=${headers}
    Should Be Equal As Strings    ${resp.status_code}    200
    Set Suite Variable    ${hw_id}    ${resp.json()['hardwareData'][0]['id']}
    Should Be True    ${hw_id} > 0
    Log    \nAdded HW's ID is ${hw_id}      console=yes
    [Return]        ${hw_id}

Remove SUT
    [Arguments]    ${hw_id}
    [Documentation]     {External}\n
    ...                 Remove SUT from cirrus. ${hw_id} is the hardware id in hwdb.\n
    ...                 Example:
    ...                 | Remove SUT | 10 |
    Create Session    cirrus    ${CIRRUS_URL}
    ${headers}=    Create Dictionary    Content-Type=application/json    auth=${session_id}
    ${resp}=    Delete    cirrus    ${REST HW}/${hw_id}     headers=${headers}
    Should Be Equal As Strings    ${resp.status_code}    204 
    Log    \nRemoved HW's ID is ${hw_id}    console=yes

Submit Job
    [Arguments]     ${test_json}   ${os}    ${ckey_data}=None   ${criteria}=pass
    [Documentation]     {External}
    ...                 Submit cirrus job.\n
    ...                 ${test_json} is the job content json file.\n
    ...                 ${os} is the SUT OS type. Acceptable values -> [windows, linux, esxi, nosut, ilo, l2].\n
    ...                 ${ckey_data} is user input ckey data. Default is None and this variable is optional.\n
    ...                 ${criteria} is the expected job result. Default is pass and this variable is optional. Acceptable values -> [pass, fail].\n
    ...                 Example:
    ...                 | Submit Job | test.json | windows |
    ...                 | ${cmd}=    | Create Dictionary | command=ls /tmp  |
    ...                 | Submit Job | test2.json | linux | ckey_data=${cmd} | criteria=pass |
    Create Session Json    cirrus    ${CIRRUS_URL}
    ${headers}=    Create Dictionary    Content-Type=application/json    auth=${session_id}
    ${data}=    Read Json File    ${CURDIR}/../testdata${/}${test_json}
    ${suts}=    Read Json File    ${CURDIR}/../testdata${/}JobServer.json
    ${ranW}=    Evaluate        random.randint(4, 5)        random       #index 4:win2012, 5:win2012R2
    ${ranL}=    Evaluate        random.randint(0, 3)        random       #index 0:rhel6.4, 1:rhel7, 2:sles11, 3:sles12
    ${ranE}=    Evaluate        random.randint(6, 8)        random       #index 6:esxi6.0, 7:esxi5.1U1, 8:esxi5.5
    ${random}=      Set Variable If
    ...             '${os}' == 'windows'    ${ranW}
    ...             '${os}' == 'linux'      ${ranL}
    ...             '${os}' == 'esxi'       ${ranE}
    ...             '${os}' == 'nosut'      ${0}    # assign 0 to random var
    ...             '${os}' == 'ilo'        ${9}    # assign index 9 ilo SUT
    ...             '${os}' == 'l2'        ${10}    # assign index 10 L2 SUT
    ${name}=    Create Dictionary    name=${suts[${random}]['name']}
    ${sut}=    Create Dictionary    sut=${name}
    Run Keyword Unless          '${os}' == 'nosut'
    ...     Run Keywords
    ...     Log       \nUse ${suts[${random}]['name']} for test     console=yes      AND
    ...     Set To Dictionary    ${data}    suts    ${sut}
    Run Keyword If      ${ckey_data} != None       Set To Dictionary       ${data}    ckey     ${ckey_data}
    ${resp}=    Post Json    cirrus    ${REST JOB}    data=${data}    headers=${headers}
    Should Be Equal As Strings    ${resp.status_code}    200
    Set Suite Variable    ${cirrus id}    ${resp.json()['cirrusid']}
    Monitor If Job Status Changes       ${session_id}       ${cirrus id}    ${criteria}
    Return From Keyword If      '${os}' == 'nosut'     ${0}
    [Return]    ${suts[${random}]}
